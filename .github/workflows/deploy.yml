name: Deploy to EC2

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  APP_DIR: "~/arryn-scrapers"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: 🔧 Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: 🔄 Sync code to EC2
      run: |
        # Create .env file with secrets
        cat > .env << EOF
        MONGODB_CONNECTION_STRING=${{ secrets.MONGODB_CONNECTION_STRING }}
        MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
        DATABASE_NAME=${{ secrets.DATABASE_NAME }}
        COLLECTION_NAME=${{ secrets.COLLECTION_NAME }}
        EOF
        
        # First sync - include .gitmodules for submodule info
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
               --exclude='__pycache__' \
               --exclude='venv' \
               --exclude='*.pyc' \
               --include='.gitmodules' \
               --exclude='.git/*' \
               . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.APP_DIR }}/
    
    - name: 🚀 Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ env.APP_DIR }}
          
          # Install docker-compose if not exists
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 Installing docker-compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Initialize git repository and update submodules
          if [ ! -d ".git" ]; then
            echo "🔧 Initializing git repository..."
            git init
            git remote add origin https://github.com/ARRYN-PI2/ServicioEjecucion.git
          fi
          
          # Ensure .gitmodules exists and initialize submodules
          if [ -f ".gitmodules" ]; then
            echo "📦 Initializing and updating submodules..."
            git submodule update --init --recursive --force 2>/dev/null || {
              echo "⚠️ Git submodule failed, manually syncing scrapers..."
              
              # Manual sync of scrapers as backup
              mkdir -p scrapers/alkosto scrapers/exito scrapers/falabella
              
              # Clone alkosto scraper if empty
              if [ ! -f "scrapers/alkosto/main.py" ]; then
                rm -rf scrapers/alkosto/*
                git clone --depth 1 https://github.com/ARRYN-PI2/scraper-alkosto.git temp_alkosto
                cp -r temp_alkosto/* scrapers/alkosto/
                rm -rf temp_alkosto
              fi
              
              # Clone exito scraper if empty  
              if [ ! -f "scrapers/exito/main.py" ]; then
                rm -rf scrapers/exito/*
                git clone --depth 1 https://github.com/ARRYN-PI2/scraper-exito.git temp_exito
                cp -r temp_exito/* scrapers/exito/
                rm -rf temp_exito
              fi
              
              # Clone falabella scraper if empty
              if [ ! -f "scrapers/falabella/scrape_falabella_all.py" ]; then
                rm -rf scrapers/falabella/*
                git clone --depth 1 https://github.com/ARRYN-PI2/scraper-falabella.git temp_falabella
                cp -r temp_falabella/* scrapers/falabella/
                rm -rf temp_falabella
              fi
            }
          else
            echo "⚠️ No .gitmodules found, skipping submodules"
          fi
          
          # Stop existing container if running
          if docker-compose ps 2>/dev/null | grep -q "Up"; then
            echo "🛑 Stopping existing container..."
            docker-compose down
          fi
          
          # Remove old images to save space
          docker image prune -f
          
          # Build and start container
          echo "🔨 Building and starting container..."
          docker-compose build --no-cache
          docker-compose up -d
          
          # Wait for container to be ready
          echo "⏳ Waiting for container to be ready..."
          sleep 45
          
          # Verify deployment
          if docker-compose ps | grep -q "Up"; then
            echo "✅ Deployment successful"
            docker-compose logs --tail=20
          else
            echo "❌ Deployment failed"
            docker-compose logs
            exit 1
          fi
        EOF
    
    - name: 🔍 Health Check
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ${{ env.APP_DIR }}
          
          # Wait a bit more for full startup
          sleep 15
          
          # Check container health
          if docker-compose exec -T servicioejeucion python -c "print('✅ Container responding')" >/dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check failed, but container might still be starting"
          fi
          
          # Show final status
          echo "📊 Final Status:"
          docker-compose ps
        EOF
    
    - name: 📋 Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo ""
        echo "🔗 Useful commands:"
        echo "- Check status: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cd ${{ env.APP_DIR }} && docker-compose ps'"
        echo "- View logs: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cd ${{ env.APP_DIR }} && docker-compose logs -f'"
        echo "- Execute scraper: ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cd ${{ env.APP_DIR }} && docker-compose exec servicioejeucion python product_uploader.py --file products.json'"
